use std::str::FromStr;
use crate::table::CharType;
use crate::parser::ast::{
    Statement, CreateDatabaseStmt, UseDatabaseStmt,
    Field, NormalField, DataType,
};

grammar;

pub Statements = Semicolon<Statement>;
pub Fields = Comma<Field>;

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(stmt) => {
            v.push(stmt);
            v
        }
    },
};

Semicolon<T>: Vec<T> = {
    <mut v:(<T> ";")*> <e:T?> => match e {
        None => v,
        Some(stmt) => {
            v.push(stmt);
            v
        }
    },
};

DataType: DataType = {
    "int" => DataType::Int,
    "char" "(" <width:Num> ")" => DataType::Char(CharType::new(width as usize)),
    "varchar" => DataType::VarChar,
}

Field: Field = {
    NormalField,
}

NormalField: Field = {
    <field_name:Identifier> <field_data_type:DataType> "NOT" "NULL" ";" => Field::Normal(NormalField { field_name, field_data_type, nullable: false }),
    <field_name:Identifier> <field_data_type:DataType> "NULL" ";" => Field::Normal(NormalField { field_name, field_data_type, nullable: true }),
}

Statement: Statement = {
    CreateDatabaseStmt,
    ShowDatabasesStmt,
    UseDatabaseStmt,
}

CreateDatabaseStmt: Statement = {
    "create" "database" <database_name:Identifier> ";" => Statement::CreateDatabase(CreateDatabaseStmt { database_name }),
};

ShowDatabasesStmt: Statement = {
    "show" "databases" ";" => Statement::ShowDatabases,
}

UseDatabaseStmt: Statement = {
    "use" <database_name:Identifier> ";" => Statement::UseDatabase(UseDatabaseStmt { database_name }),
}

Identifier: String = {
    r"[a-zA-Z_][a-zA-Z_0-9]*" => String::from_str(<>).unwrap(),
};

Num: i32 = <s:r"[0-9]+"> => i32::from_str(s).unwrap();
