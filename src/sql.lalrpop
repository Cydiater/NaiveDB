use std::str::FromStr;
use crate::table::{CharType, DataType};
use crate::parser::ast::*;

grammar;

pub Statements = Semicolon<Statement>;
pub Fields = Comma<Field>;
pub Exprs = Comma<Expr>;
pub Tuples = Comma<Tuple>;

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(stmt) => {
            v.push(stmt);
            v
        }
    },
};

Semicolon<T>: Vec<T> = {
    <mut v:(<T> ";")*> <e:T?> => match e {
        None => v,
        Some(stmt) => {
            v.push(stmt);
            v
        }
    },
};

pub Expr: ExprNode = {
    <constant_expr: ConstantExpr> => ExprNode::Constant(constant_expr),
    <column_ref_expr: ColumnRefExpr> => ExprNode::ColumnRef(column_ref_expr),
}

ColumnRefExpr: ColumnRefExprNode = {
    <column_name: Identifier> => ColumnRefExprNode { column_name },
}

ConstantExpr: ConstantExprNode = {
    <num: Num> => ConstantExprNode { value: ConstantValue::Int(num) },
    <str: Str> => ConstantExprNode { value: ConstantValue::String(str) },
};

DataType: DataType = {
    "int" => DataType::Int,
    "char" "(" <width:Num> ")" => DataType::Char(CharType::new(width as usize)),
    "varchar" => DataType::VarChar,
    "bool" => DataType::Bool,
}

Field: Field = {
    NormalField,
}

NormalField: Field = {
    <field_name:Identifier> <field_data_type:DataType> "not" "null" => Field::Normal(NormalField { field_name, field_data_type, nullable: false }),
    <field_name:Identifier> <field_data_type:DataType> "null" => Field::Normal(NormalField { field_name, field_data_type, nullable: true }),
}

pub Statement: Statement = {
    CreateDatabaseStmt,
    ShowDatabasesStmt,
    UseDatabaseStmt,
    CreateTableStmt,
    InsertStmt,
    DescStmt,
    SelectStmt,
}

Selectors: Selectors = {
    "*" => Selectors::All,
    <exprs: Exprs> => Selectors::Exprs(exprs),
}

SelectStmt: Statement = {
    "select" <selectors: Selectors> "from" <table_name: Identifier> ";" => Statement::Select(SelectStmt { table_name, selectors }),
}

DescStmt: Statement = {
    "desc" <table_name: Identifier> ";" => Statement::Desc(DescStmt { table_name }),
}

CreateDatabaseStmt: Statement = {
    "create" "database" <database_name: Identifier> ";" => Statement::CreateDatabase(CreateDatabaseStmt { database_name }),
}

ShowDatabasesStmt: Statement = {
    "show" "databases" ";" => Statement::ShowDatabases,
}

UseDatabaseStmt: Statement = {
    "use" <database_name: Identifier> ";" => Statement::UseDatabase(UseDatabaseStmt { database_name }),
}

CreateTableStmt: Statement = {
    "create" "table" <table_name: Identifier> "(" <fields: Fields> ")" ";" => Statement::CreateTable(CreateTableStmt { table_name, fields }),
}

InsertStmt: Statement = {
    "insert" "into" <table_name: Identifier> "values" <values: Tuples> ";" => Statement::Insert(InsertStmt { table_name, values }),
}

Identifier: String = {
    r"[a-zA-Z_][a-zA-Z_0-9]*" => String::from_str(<>).unwrap(),
}

Tuple: Vec<ExprNode> = "(" <exprs: Exprs> ")" => exprs;

Num: i32 = <s:r"[0-9]+"> => i32::from_str(s).unwrap();

Str: String = r#"'[a-zA-Z_0-9]+'"# => {
    let quoted = String::from_str(<>).unwrap();
    let len = quoted.len();
    quoted[1..len - 1].into()
};
