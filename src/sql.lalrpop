use std::str::FromStr;
use crate::parser::ast::{Statement, Tok, CreateDatabaseStmt, UseDatabaseStmt};

grammar;

pub Statements = Semicolon<Statement>;

Semicolon<T>: Vec<T> = {
    <mut v:(<T> ";")*> <e:T?> => match e {
        None => v,
        Some(stmt) => {
            v.push(stmt);
            v
        }
    },
};

Statement: Statement = {
    CreateDatabaseStmt,
    ShowDatabasesStmt,
    UseDatabaseStmt,
}

CreateDatabaseStmt: Statement = {
    CreateDatabaseToken <database_name:Identifier> ";" => Statement::CreateDatabase(CreateDatabaseStmt { database_name }),
};

ShowDatabasesStmt: Statement = {
    ShowDatabasesToken ";" => Statement::ShowDatabases,
}

UseDatabaseStmt: Statement = {
    UseDatabaseToken <database_name:Identifier> ";" => Statement::UseDatabase(UseDatabaseStmt { database_name }),
}

CreateDatabaseToken: Tok = {
    "create database" => Tok::CreateDatabase,
    "CREATE DATABASE" => Tok::CreateDatabase,
};

ShowDatabasesToken: Tok = {
    "show databases" => Tok::ShowDatabases,
    "SHOW DATABASES" => Tok::ShowDatabases,
}

UseDatabaseToken: Tok = {
    "use" => Tok::UseDatabase,
    "USE" => Tok::UseDatabase,
}

Identifier: String = {
    r"[a-zA-Z_][a-zA-Z_0-9]*" => String::from_str(<>).unwrap(),
};
