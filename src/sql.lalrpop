use std::str::FromStr;
use crate::table::{CharType, Datum};
use crate::expr::{ExprImpl, ConstantExpr};
use crate::parser::ast::{
    Statement, CreateDatabaseStmt, UseDatabaseStmt, CreateTableStmt,
    Field, NormalField, DataType,
};

grammar;

pub Statements = Semicolon<Statement>;
pub Fields = Comma<Field>;

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(stmt) => {
            v.push(stmt);
            v
        }
    },
};

Semicolon<T>: Vec<T> = {
    <mut v:(<T> ";")*> <e:T?> => match e {
        None => v,
        Some(stmt) => {
            v.push(stmt);
            v
        }
    },
};

DataType: DataType = {
    "int" => DataType::Int,
    "char" "(" <width:Num> ")" => DataType::Char(CharType::new(width as usize)),
    "varchar" => DataType::VarChar,
    "bool" => DataType::Bool,
}

Field: Field = {
    NormalField,
}

NormalField: Field = {
    <field_name:Identifier> <field_data_type:DataType> "not" "null" => Field::Normal(NormalField { field_name, field_data_type, nullable: false }),
    <field_name:Identifier> <field_data_type:DataType> "null" => Field::Normal(NormalField { field_name, field_data_type, nullable: true }),
}

Statement: Statement = {
    CreateDatabaseStmt,
    ShowDatabasesStmt,
    UseDatabaseStmt,
    CreateTableStmt,
}

CreateDatabaseStmt: Statement = {
    "create" "database" <database_name: Identifier> ";" => Statement::CreateDatabase(CreateDatabaseStmt { database_name }),
};

ShowDatabasesStmt: Statement = {
    "show" "databases" ";" => Statement::ShowDatabases,
}

UseDatabaseStmt: Statement = {
    "use" <database_name: Identifier> ";" => Statement::UseDatabase(UseDatabaseStmt { database_name }),
}

CreateTableStmt: Statement = {
    "create" "table" <table_name: Identifier> "(" <fields: Fields> ")" ";" => Statement::CreateTable(CreateTableStmt { table_name, fields }),
}

Identifier: String = {
    r"[a-zA-Z_][a-zA-Z_0-9]*" => String::from_str(<>).unwrap(),
};

pub Expr: ExprImpl = {
    <constant_expr: ConstantExpr> => ExprImpl::Constant(constant_expr),
};

ConstantExpr: ConstantExpr = {
    <num: Num> => ConstantExpr::new(Datum::Int(num)),
    <str: Str> => ConstantExpr::new(Datum::VarChar(str)),
};

Num: i32 = <s:r"[0-9]+"> => i32::from_str(s).unwrap();

Str: String = r#"'[a-zA-Z_0-9]+'"# => String::from_str(<>).unwrap();
